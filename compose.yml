version: '3.7'

services:

    php:
        build:
            context: .
            target: local
            args:
                UID: 1000
                USER: local
        restart: on-failure
        volumes:
            - ./:/app/
            - ./.docker/php/php-ini-overrides.ini:/usr/local/etc/php/conf.d/99-overrides.ini
            - app_home:/home/developer
        working_dir: /app
        ports:
            - "9501:9501"
            - "80:80"
        tty: true
        networks:
            devapp:

    postgres:
        image: postgres:17.2-alpine3.21
        environment:
            POSTGRES_USER: demo
            POSTGRES_PASSWORD: demo
        volumes:
            - postgres_db:/var/lib/postgresql/data
        ports:
            - "5432:5432"
#        healthcheck:
#            test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}" ]
#            timeout: 5s
#            retries: 5
#            start_period: 60s
        networks:
            devapp:

    rabbitmq:
        image: rabbitmq:4.0.5-management-alpine
        restart: on-failure
        ports: [ "15672:15672" ]
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: 'demo'
            RABBITMQ_DEFAULT_PASS: 'demo'
            RABBITMQ_NODENAME: 'demo'
        networks:
            devapp:

    kafka:
        image: apache/kafka:3.7.2
        restart: on-failure
        ports:
            - 9094:9094
        volumes:
            - kafka_data:/var/lib/kafka/data
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT'
            KAFKA_ADVERTISED_LISTENERS: 'INSIDE://kafka:9092,OUTSIDE://localhost:9094'
            KAFKA_PROCESS_ROLES: 'broker,controller'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
            KAFKA_LISTENERS: 'CONTROLLER://:29093,INSIDE://:9092,OUTSIDE://:9094'
            KAFKA_INTER_BROKER_LISTENER_NAME: 'INSIDE'
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_LOG_DIRS: '/var/lib/kafka/data'
        networks:
            devapp:

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        restart: on-failure
        depends_on:
            - kafka
#            - schema-registry
        environment:
            DYNAMIC_CONFIG_ENABLED: 'true'
        ports:
            - 8080:8080
        volumes:
            - ./.docker/kafka-ui/config.yaml:/etc/kafkaui/dynamic_config.yaml
        networks:
            devapp:

#    schema-registry:
#        image: confluentinc/cp-schema-registry
#        restart: on-failure
#        depends_on:
#            - kafka
#        environment:
#            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:19092'
#            SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
#            SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
#            SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
#        ports:
#            - 8085:8085
#        networks:
#            devapp:

###> doctrine/doctrine-bundle ###

networks:
    devapp:
        name: devapp

volumes:
    app_home:
    kafka_data:
    rabbitmq_data:
    postgres_db:
